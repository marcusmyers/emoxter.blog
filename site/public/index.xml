<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eMoxter</title>
    <link>http://emoxter.com/index.xml</link>
    <description>Recent content on eMoxter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Dec 2014 13:17:00 -0500</lastBuildDate>
    <atom:link href="http://emoxter.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manage User Docks from the Terminal</title>
      <link>http://emoxter.com/post/manage-user-docks-from-the-terminal/</link>
      <pubDate>Sun, 21 Dec 2014 13:17:00 -0500</pubDate>
      
      <guid>http://emoxter.com/post/manage-user-docks-from-the-terminal/</guid>
      <description>&lt;p&gt;When managing school machines there are a lot of times were you want to have a certain set of apps in the Dock on a Mac. For example you have may have a cart of MacBooks that are used as a mobile lab that should all look the same to the user.&lt;/p&gt;

&lt;p&gt;You might be surprised how many people think there might be something wrong with the Mac because it doesn&amp;rsquo;t have the same Dock as the one they used previously.  Also kids will be kids and like to mess around.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://github.com/kcrawford/dockutil&#34;&gt;dockutil&lt;/a&gt; (&lt;a href=&#34;http://tech.napoleonareaschools.org/wp-content/uploads/2015/01/dockutil-2.0.2.dmg&#34;&gt;Installer DMG&lt;/a&gt;), a command line utility written in Python.  The installer puts the utility in the &lt;code&gt;/usr/local/bin&lt;/code&gt; directory, which is already in your path environment.  After install open up the terminal and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/~$ dockutil -h
usage:     dockutil -h
usage:     dockutil --add &amp;lt;path to item&amp;gt; | &amp;lt;url&amp;gt; [--label &amp;lt;label&amp;gt;] [ folder_options ] [ position_options ] [ plist_location_specification ] [--no-restart]
usage:     dockutil --remove &amp;lt;dock item label&amp;gt; | all [ plist_location_specification ] [--no-restart]
usage:     dockutil --move &amp;lt;dock item label&amp;gt;  position_options [ plist_location_specification ]
usage:     dockutil --find &amp;lt;dock item label&amp;gt; [ plist_location_specification ]
usage:     dockutil --list [ plist_location_specification ]
usage:     dockutil --version

position_options:
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On our cart laptops we have LaunchAgent run this bash script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

DOCKUTIL=/usr/local/bin/dockutil

$DOCKUTIL --remove all
$DOCKUTIL --add &#39;/Applications/Google Chrome.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Safari.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Firefox.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Maps.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Notes.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Numbers.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Keynote.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Pages.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/iBooks.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications/Managed Software Center.app&#39; --no-restart
$DOCKUTIL --add &#39;/Applications&#39; --no-restart
$DOCKUTIL --add &#39;~/Downloads&#39;

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####What&amp;rsquo;s going on here?!?
The &lt;code&gt;$DOCKUTIL --remove all&lt;/code&gt; removes everything in the Dock which you might have guessed. &lt;code&gt;$DOCKUTIL --add &#39;/Applications/Google Chrome.app&lt;/code&gt; adds the Google Chrome web browser, but the added &lt;code&gt;--no-restart&lt;/code&gt; doesn&amp;rsquo;t restart the Dock meaning we have more to do. The default action is to restart the Dock after you make a change, by passing in the &lt;code&gt;--no-restart&lt;/code&gt; it surpresses the OSes urge to restart it. Note that the of the script we ad the &lt;strong&gt;Downloads&lt;/strong&gt; folder as &lt;code&gt;dockutil&lt;/code&gt; is able to differentiate the difference of an app and a folder.&lt;/p&gt;

&lt;p&gt;Hopefully the &lt;code&gt;dockutil&lt;/code&gt; becomes a good utility for you to manage a users Dock.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sweet Software Management for Windows</title>
      <link>http://emoxter.com/post/sweet-software-management-for-windows/</link>
      <pubDate>Tue, 29 Apr 2014 21:34:00 -0400</pubDate>
      
      <guid>http://emoxter.com/post/sweet-software-management-for-windows/</guid>
      <description>

&lt;p&gt;Managing software on the Windows platform can be very cumbersome. Using Group Policy can sometimes be a hassle as it may take a couple restarts in order for the machine to get the software. Of course you could also purchse &lt;a href=&#34;http://www.microsoft.com/en-us/server-cloud/products/system-center-2012-r2/default.aspx#fbid=3PLDgMbYfRx&#34;&gt;Microsoft Systems Manager&lt;/a&gt; at a hefty chunk of cheese, but like me you work in educaiton so money is tight.&lt;/p&gt;

&lt;p&gt;##Baked In
The quickest solution is to bake in all the software you need into a computer image. So if you have 3 computer labs that all serve different purposes you would create an image for each lab.  Lets also assume each lab has the same exact computer model the only thing that separates them is the software installed on them. Then you start adding all the teacher machines which can be separated by department and the list goes on.&lt;/p&gt;

&lt;p&gt;As you can see your imaging server can get bloated quick if you start baking in your software to all images. To me the less we have in the base image the faster it is to image a whole building. You might say, &amp;ldquo;&lt;em&gt;You still have to install all the software!&lt;/em&gt;&amp;rdquo;, but we&amp;rsquo;ll get to that in a little bit.&lt;/p&gt;

&lt;p&gt;##&amp;ldquo;Holy Chocolate(y) Eclair, Batman!&amp;rdquo;
Enter &lt;a href=&#34;http://chocolatey.org&#34;&gt;chocolatey&lt;/a&gt;, an apt-get for Windows. Chocolatey has over 7,000 packages to install onto Windows with ease.  For example lets say we want to install Acrobat Reader on your Windows machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\\&amp;gt; cinst adobereader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install the latest version that is in the chocolatey packages. Seems a little too simple doesn&amp;rsquo;t it? That&amp;rsquo;s what is so nice about it.  Simple. To the Point.
So lets say you have a post-image script that runs and installs all the software needed for that particular machine or lab.  That would solve the problem of bloating your imaging server with a different image for each user(s) specific set of software.&lt;/p&gt;

&lt;p&gt;##Installing Chocolatey
Installing chocolatey is a simple command in the command prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\\&amp;gt;  @powershell -NoProfile -ExecutionPolicy unrestricted -Command &amp;quot;iex ((new-object net.webclient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%systemdrive%\\chocolatey\\bin
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: There have been issues when using &lt;code&gt;https://chocolatey.org/install.ps1&lt;/code&gt; to fix the issue just remove the &amp;rsquo;s&amp;rsquo; and use this instead &lt;code&gt;http://chocolatey.org/install.ps1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;BUT there are a couple requirements needed on the operating system.&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows XP/Vista/7/8/2003/2008&lt;/li&gt;
&lt;li&gt;.NET Framework 4.0&lt;/li&gt;
&lt;li&gt;PowerShell 2.0&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you have .NET Framework 3.5 installed, chocolatey will take care of installing .NET 4.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;##The Chocolatey Goods
At work we are actually using &lt;a href=&#34;http://chocolatey.org&#34;&gt;chocolatey&lt;/a&gt; as a package provider for our &lt;a href=&#34;http://puppetlabs.com&#34;&gt;Puppet&lt;/a&gt; setup. We created a base node for Windows that has all the base software that we need for all machines.  So for example every one of our machines, no matter what, have the following installed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adobe Reader&lt;/li&gt;
&lt;li&gt;Adobe Flash Player (plugin &amp;amp; active-x)&lt;/li&gt;
&lt;li&gt;Mozilla Firefox&lt;/li&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;li&gt;PDFCreator&lt;/li&gt;
&lt;li&gt;VLC&lt;/li&gt;
&lt;li&gt;K-Lite Codec Pack&lt;/li&gt;
&lt;li&gt;Java Runtime Environment&lt;/li&gt;
&lt;li&gt;Quicktime&lt;/li&gt;
&lt;li&gt;Putty&lt;/li&gt;
&lt;li&gt;Silverlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So each computer is defined as a &lt;code&gt;node&lt;/code&gt; in puppet and you can define what is installed and some other configuration stuff.  Enough about puppet for now but here is a possible example of how to define a puppet node and how we use it with chocolatey to install software.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /etc/puppet/manifests/site.pp
node winbasenode {
  ...
  package { &#39;vlc&#39;:
    ensure =&amp;gt; installed,
  }
  
  package { &#39;adobereader&#39;:
    ensure =&amp;gt; installed,
  }
  
  package { &#39;firefox&#39;:
    ensure =&amp;gt; installed,
  }
  
  package { &#39;googlechrome&#39;:
    ensure =&amp;gt; installed,
  }
  ...
}

node &#39;hs-adm-princ.domain.lan&#39; inherits &#39;winbasenode&#39; {
   // More node definitions go here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in short every software package that is defined in the &lt;code&gt;winbasenode&lt;/code&gt; will get installed on the &lt;code&gt;hs-adm-princ.domain.lan&lt;/code&gt; machine. Using chocolatey with puppet makes for a &amp;ldquo;set it and forget it&amp;rdquo; kind of imaging process.&lt;/p&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chocolatey/chocolatey/wiki/ChocolateyVsNinite&#34;&gt;Chocolatey vs Ninite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ninite.com/&#34;&gt;Ninite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Windows XP Vagrant box</title>
      <link>http://emoxter.com/post/creating-a-windows-xp-vagrant-box/</link>
      <pubDate>Thu, 17 Apr 2014 21:34:00 -0400</pubDate>
      
      <guid>http://emoxter.com/post/creating-a-windows-xp-vagrant-box/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; is a great tool to use when creating test boxes.  Although it is commonly used with *nix servers, but a lot of the time we may want to test other things such as a Windows box.  Because of obvious licensing issues there are NO Windows Vagrant boxes published online.&lt;/p&gt;

&lt;p&gt;Vagrant is a great tool to use with &lt;a href=&#34;http://www.virtualbox.org&#34;&gt;VirtualBox&lt;/a&gt;, until recently they added VMWare Fusion and Workstation for a price. VirtualBox is free and is an easy tool to get started with when using Vagrant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#resources&#34;&gt;Post Resources&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;

&lt;p&gt;Vagrant now defaults to WinRM for Windows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Here are the steps we will go through in this guide.  (This assumes you already have Vagrant and VirtualBox installed.)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/WinRB/vagrant-windows&#34;&gt;vagrant-windows&lt;/a&gt; plugin&lt;/li&gt;
&lt;li&gt;Create and configure a Windows XP guest base box&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;install-vagrant-windows-plugin-a-name-vagrant-window-a&#34;&gt;Install vagrant-windows plugin &lt;a name=\&#34;vagrant-window\&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This will be the easiest step.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vagrant plugin install vagrant-windows&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-a-base-box&#34;&gt;Creating a Base Box&lt;/h2&gt;

&lt;p&gt;Out of the box the &lt;a href=&#34;https://github.com/WinRB/vagrant-windows&#34;&gt;vagrant-windows&lt;/a&gt; plugin supports the following Windows Operating Systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 7&lt;/li&gt;
&lt;li&gt;Windows 8&lt;/li&gt;
&lt;li&gt;Windows Server 2008&lt;/li&gt;
&lt;li&gt;Windows Server 2008 R2&lt;/li&gt;
&lt;li&gt;Windows Server 2012&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So setting up XP will take a little more configuration.  If you are setting up one of the supported operating systems please follow the guide on the &lt;a href=&#34;https://github.com/WinRB/vagrant-windows&#34;&gt;vagrant-windows&lt;/a&gt; page.&lt;/p&gt;

&lt;h3 id=&#34;install-xp&#34;&gt;Install XP&lt;/h3&gt;

&lt;p&gt;This guide is not created to show you how to create a Windows XP guest on VirtualBox but here are is what I used for creating my guest box.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name: XP-BASE-BOX (We will need the name to create the base box)&lt;/li&gt;
&lt;li&gt;Memory: 512MB&lt;/li&gt;
&lt;li&gt;Hard Drive: 20GB (Dynamically Allocated)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;n\You can obviously change these settings as you see fit.  But these settings are what we used to hopefully help make the vagrant box as small as possible.  Our vagrant box ended up being ~2GB after the fact.&lt;/p&gt;

&lt;h3 id=&#34;needed-software-for-xp&#34;&gt;Needed software for XP&lt;/h3&gt;

&lt;p&gt;Once you have your base box created we need to install a couple things to make it work with Vagrant.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=7217&#34;&gt;PowerShell&lt;/a&gt; *This will get upgraded to 2.0 when you install WinRM 2.0&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=16818&#34;&gt;WinRM 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage1.nifty.com/emk/symlink-1.06-x86.cab&#34;&gt;Symbolic Link Driver for XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sshwindows.sourceforge.net/&#34;&gt;SSH Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;winrm-windows-remote-management&#34;&gt;WinRM (Windows Remote Management)&lt;/h3&gt;

&lt;p&gt;To get started with with WinRM you must set the following registry key to zero in order to all WinRM to work \&amp;ldquo;remotely\&amp;rdquo; on Windows XP.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa forceguest 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we will need to configure WinRM on the XP base box.  Open up the command prompt and type these in the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\\&amp;gt; winrm quickconfig -q
C:\\&amp;gt; winrm set winrm/config/winrs @{MaxMemoryPerShellMB=\&amp;quot;512\&amp;quot;}
C:\\&amp;gt; winrm set winrm/config @{MaxTimeoutms=\&amp;quot;1800000\&amp;quot;}
C:\\&amp;gt; winrm set winrm/config/service @{AllowUnencrypted=\&amp;quot;true\&amp;quot;}
C:\\&amp;gt; winrm set winrm/config/service/auth @{Basic=\&amp;quot;true\&amp;quot;}
C:\\&amp;gt; sc config WinRM start= auto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The settings above create defaults for WinRM.
.&lt;/p&gt;

&lt;h3 id=&#34;symbolic-link-driver&#34;&gt;Symbolic Link Driver&lt;/h3&gt;

&lt;p&gt;The symbolic link driver makes it possible to share folders between your computer and the vagrant box, checkout &lt;a href=&#34;http://docs.vagrantup.com/v2/getting-started/synced_folders.html&#34;&gt;Vagrant Synced Folders&lt;/a&gt;. Once you have downloaded the driver open the &lt;code&gt;.cab&lt;/code&gt; file and copy all the files (&lt;code&gt;ln.exe, senable.exe, symlink.sys&lt;/code&gt;) to &lt;code&gt;C:\\WINDOWS&lt;/code&gt; directory. Open up the command prompt and type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd C:\\WINDOWS
C:\\WINDOWS&amp;gt; senable.exe install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Windows 7 came with a utility called &lt;code&gt;mklink&lt;/code&gt; that creates symbolic links like &lt;code&gt;ln&lt;/code&gt; for *nix type systems. Once again &lt;code&gt;vagrant-windows&lt;/code&gt; supports Windows 7 and up so it will be looking for the &lt;code&gt;mklink&lt;/code&gt; to create that synced folder.  In order to fake &lt;code&gt;mklink&lt;/code&gt; for &lt;code&gt;vagrant-window&lt;/code&gt; we need to do the following steps.&lt;/p&gt;

&lt;p&gt;####mklink.cmd
Open up notepad and paste the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off

SET DIR=%~dp0%
@powershell -NoProfile -ExecutionPolicy unrestricted -Command \&amp;quot;&amp;amp; &#39;%DIR%Symlink.ps1&#39; %*\&amp;quot;

pushd \&amp;quot;%DIR%\&amp;quot;
\&amp;quot;%DIR%senable.exe\&amp;quot; start
popd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this file as &lt;code&gt;mklink.cmd&lt;/code&gt; to &lt;code&gt;C:\\WINDOWS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;####Symlink.ps1&lt;/p&gt;

&lt;p&gt;Open up notpad and paste the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;param (
 [string]$symlinktype,
 [string]$link,
 [string]$target
)

$scriptpath = $MyInvocation.MyCommand.Path
$ScriptDir = Split-Path $scriptpath

$senable = Join-Path \&amp;quot;$ScriptDir\&amp;quot; senable.exe
$ln = Join-Path \&amp;quot;$ScriptDir\&amp;quot; ln.exe

pushd \&amp;quot;$ScriptDir\&amp;quot;
&amp;amp; cmd /c \&amp;quot;$senable\&amp;quot; install
popd
&amp;amp; cmd /c \&amp;quot;$ln\&amp;quot; -s \&amp;quot;$target\&amp;quot; \&amp;quot;$link\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this file as &lt;code&gt;Symlink.ps1&lt;/code&gt; to &lt;code&gt;C:\\WINDOWS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;###The Vagrant File
Vagrant loads multiple &lt;code&gt;Vagrantfile&lt;/code&gt;s read the following page to understand vagrant file load ordering, &lt;a href=&#34;http://docs.vagrantup.com/v2/vagrantfile/#load-order&#34;&gt;Vagrantfile Load Order&lt;/a&gt;. We can actually package a &lt;code&gt;Vagrantfile&lt;/code&gt; with the box.  Anything that is in the &lt;code&gt;Vagrantfile&lt;/code&gt; that you package with the box does not need to be in the project directory &lt;code&gt;Vagrantfile&lt;/code&gt;.  Here&amp;rsquo;s the &lt;code&gt;Vagrantfile&lt;/code&gt; we will be packing with the base box. (I created a &lt;code&gt;XP&lt;/code&gt; folder inside my &lt;code&gt;~/Documents&lt;/code&gt; folder on my mac and put the &lt;code&gt;Vagrantfile&lt;/code&gt; in it.)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant.configure(\&amp;quot;2\&amp;quot;) do |config|

  # Configure base box parameters
  config.vm.box = \&amp;quot;windowsxp\&amp;quot;
  config.vm.box_url = \&amp;quot;./windowsxp.box\&amp;quot;
  config.vm.guest = :windows

  config.vm.boot_timeout = 600
  # Port forward WinRM and RDP
  config.vm.network :forwarded_port, guest: 3389, host: 3389
  config.vm.network :forwarded_port, guest: 5985, host: 5985, id: \&amp;quot;winrm\&amp;quot;, auto_correct: true

  # Provider 
  config.vm.provider \&amp;quot;virtualbox\&amp;quot; do |v|
    v.gui =true
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-the-vagrant-box&#34;&gt;Creating the vagrant box&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s the command to create our base xp box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:~/Documents/XP$ vagrant package --base XP-BASE-BOX --output windowsxp.box --vagrantfile ./Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;breakdown&#34;&gt;Breakdown&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;--base XP-BASE-BOX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--base&lt;/code&gt; command takes an argument of VirtualBox machine name to package as a base box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--output windowsxp.box
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--output&lt;/code&gt; command takes an argument to name you newly packaged box. If you don&amp;rsquo;t use the &lt;code&gt;--output&lt;/code&gt; command it defaults to &lt;code&gt;package.box&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--vagrantfile ./Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;--vagrantfile&lt;/code&gt; command will package a &lt;code&gt;Vagrantfile&lt;/code&gt; with your new base box.&lt;/p&gt;

&lt;p&gt;##Conclusion
Creating vagrant boxes aren&amp;rsquo;t that hard to do, especially for operating systems that are still supported.  The truth is we are unfortunately still using XP at work and using a vagrant box to test things is a lot quicker than imaging a machine. We use &lt;a href=&#34;http://www.puppetlabs.com&#34;&gt;Puppet&lt;/a&gt; to manage all our desktops/laptops at work and having a way to test all our platforms using VirtualBox makes it so simple.  In a future post I will discuss how we use this vagrant box.&lt;/p&gt;

&lt;h2 id=&#34;resources-a-name-resources-a&#34;&gt;Resources &lt;a name=\&#34;resources\&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WinRb/vagrant-windows&#34;&gt;WinRb/vagrant-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.vagrantup.com/v2/cli/package.html&#34;&gt;Vagrant Package Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/4339220/is-there-a-way-to-map-a-unc-path-to-a-local-folder-on-windows-2003/18593425#18593425&#34;&gt;Symbolic Links in XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://schinagl.priv.at/nt/ln/ln.html#symboliclinksforwindowsxp&#34;&gt;Symbolic Link Driver for XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;Vagrant Boxes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>